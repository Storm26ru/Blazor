@page "/disciplines"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Academy.Models
@using Academy.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Academy.Data.AcademyContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Disciplines</h1>
<div style="display:flex; justify-content:space-between">
    <form action="/disciplines" data-enhance data-permanent>
        <input type="search" name="disciplineFilter" placeholder="Enter discipline name" />
        <input type="submit" value="Search" />
    </form>
    <div>
        <lebel for="disciplines-per-page">Disciplines per page</lebel>
        <select id="disciplines-per-page" @bind="pagination.ItemsPerPage">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
        </select>
    </div>


</div>
<p>
    <a href="disciplines/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredDisciplines" Pagination="pagination">
    <PropertyColumn Property="discipline => discipline.discipline_id" title="Id" Sortable="true"/>
    <PropertyColumn Property="discipline => discipline.discipline_name"  Title="Предметы" Sortable="true" />
    <PropertyColumn Property="discipline => discipline.number_of_lessons" Title = "Количество часов" Sortable="true"/>

    <TemplateColumn Context="discipline">
        <a href="@($"disciplines/edit?discipline_id={discipline.discipline_id}")">Edit</a> |
        <a href="@($"disciplines/details?discipline_id={discipline.discipline_id}")">Details</a> |
        <a href="@($"disciplines/delete?discipline_id={discipline.discipline_id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="pagination"></Paginator>

@code {
    private AcademyContext context = default!;
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    [SupplyParameterFromQuery]
    private string? disciplineFilter { get; set; } = "";
    private IQueryable<Discipline> FilteredDisciplines =>
    context.Disciplines.Where(d => d.discipline_name.Contains(disciplineFilter ?? string.Empty));
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
