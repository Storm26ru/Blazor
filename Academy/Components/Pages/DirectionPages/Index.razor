@page "/directions"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Academy.Models
@using Academy.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Academy.Data.AcademyContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Directions</h1>
<div style="display:flex; justify-content:space-between">
   <form action="/directions" data-enhance >
       <input type="search" name="directionFilter" placeholder="Enter direction name" />
       <input type="submit" value="Search" />
   </form>
    <div>
        <label for="directions-per-page">Direction per page</label>
        <select id="directions-per-page" @bind="pagination.ItemsPerPage">
            <option value="5">5</option>
            <option value="10">10</option>
        </select>
    </div>
</div>
<p>
    <a href="directions/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilterDirections" Pagination="pagination">
    <PropertyColumn Property="direction => direction.direction_id" />
    <PropertyColumn Property="direction => direction.direction_name" />

    <TemplateColumn Context="direction">
        <a href="@($"directions/edit?direction_id={direction.direction_id}")">Edit</a> |
        <a href="@($"directions/details?direction_id={direction.direction_id}")">Details</a> |
        <a href="@($"directions/delete?direction_id={direction.direction_id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="pagination"></Paginator>

@code {
    private AcademyContext context = default!;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    [SupplyParameterFromQuery]
    private string? directionFilter { get; set; }
    private IQueryable<Direction> FilterDirections =>
        context.Directions.Where(d => d.direction_name.Contains(directionFilter ?? string.Empty));

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
