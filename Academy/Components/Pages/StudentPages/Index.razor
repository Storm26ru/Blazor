@page "/students"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Academy.Models
@using Academy.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Academy.Data.AcademyContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>
<div style="display:flex; justify-content:space-between">
    <form action="/students" data-enhance data-permanent>
        <input type="search" name="studentFilter" placeholder="Enter last-name" />
        <input type="submit" value="Search" />
    </form>
    <div>
        <label for="students-per-page">Students per page:</label>
        <select id="students-per-page" @bind="pagination.ItemsPerPage">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="20">20</option>
        </select>
    </div>
</div>
<p>
    <a href="students/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredStudent" Pagination="pagination">
    <PropertyColumn Property="student => student.last_name" Sortable="true"/>
    <PropertyColumn Property="student => student.first_name" Sortable="true" />
    <PropertyColumn Property="student => student.middle_name" Sortable="true" />
    <PropertyColumn Property="student => student.birth_date" Sortable="true" />
    <PropertyColumn Property="student => student.email" />
    <PropertyColumn Property="student => student.phone" />
    <PropertyColumn Property="student => student.photo" />
    <PropertyColumn Property="student => student.group" />

    <TemplateColumn Context="student">
        <a href="@($"students/edit?stud_id={student.stud_id}")">Edit</a> |
        <a href="@($"students/details?stud_id={student.stud_id}")">Details</a> |
        <a href="@($"students/delete?stud_id={student.stud_id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="pagination"/>



@code {
    private AcademyContext context = default!;
    [SupplyParameterFromQuery]
    private string? StudentFilter { get; set; }
    private IQueryable<Student> FilteredStudent =>
        context.Students.Where(s => s.last_name.Contains(StudentFilter ?? string.Empty));

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
