@page "/groups"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Academy.Models
@using Academy.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Academy.Data.AcademyContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Groups</h1>

<div style="display:flex; justify-content:space-between">
    <form action="/groups" data-enhance data-permanent>
        <input type="search" name="groupFilter" placeholder="Enter group name" />
        <input type="submit" value="Search" />
    </form>
    <div>
        <lebel for="groups-per-page">Disciplines per page</lebel>
        <select id="groups-per-page" @bind="pagination.ItemsPerPage">
            <option value="5">5</option>
            <option value="10">10</option>
        </select>
    </div>


</div>
<p>
    <a href="groups/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredGroups" Pagination="pagination">
    <PropertyColumn Property="group => group.group_id"  Sortable="true"/>
    <PropertyColumn Property="group => group.group_name" Sortable="true" />
    <PropertyColumn Property="group => group.direction" Sortable="true" />
    <PropertyColumn Property="group => group.form" Sortable="true" />

    <TemplateColumn Context="group">
        <a href="@($"groups/edit?group_id={group.group_id}")">Edit</a> |
        <a href="@($"groups/details?group_id={group.group_id}")">Details</a> |
        <a href="@($"groups/delete?group_id={group.group_id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="pagination"></Paginator>

@code {
    private AcademyContext context = default!;
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    [SupplyParameterFromQuery]
    private string? groupFilter { get; set; } = "";
    private IQueryable<Group> FilteredGroups =>
    context.Groups.Where(d => d.group_name.Contains(groupFilter ?? string.Empty));

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
